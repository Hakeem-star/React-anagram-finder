{"version":3,"sources":["celebAnagramFinderAPICall.js","ResultsFound.js","components/loading/dual-ring.js","App.js","serviceWorker.js","index.js"],"names":["celebAnagramFinder","value","apiChange","a","resFetch","status","k_counter","splitAnagramToLetters","anagram","split","anagramLetterCount","forEach","ana","ind","initialArray","filter","filteredAna","length","i_counter","celebsFromApi","CelebrityValues","celebNameCleanedUp","name","toUpperCase","replace","matchedLetters","l_counter","includes","anagramLetterInCelebLetterCount","data","totalCount","count","Object","keys","indVal","toFixed","matchRateResult","push","console","log","Promise","resolve","reject","val","index","cleanInputValue","fetch","proxyUrl","json","ResultsFound","props","state","currentResultsPage","maxPages","this","setState","chunk","results","prevProps","prevState","snapshot","display","arr","chunckSize","newChunk","j","i","slice","e","target","textContent","chunked","rows","error","Array","fill","map","anagramName","celebName","celebNameURL","href","innerCurrent","key","style","className","ResultsPageNumber","prevResults","navigateResults","current","resultsCounter","nextResults","maximum","React","Component","onClick","Loading","NothingFound","ResultDivContain","PageTitle","title","SearchSelector","onChange","handleClick","id","SearchInput","placeholderText","placeholder","onKeyPress","submitted","searchTerm","type","defaultValue","PreviousSearches","historyButtons","searchResults","history","data-index","goback","App","anagramType","defaultProps","SearchInputName","resultsHistory","loading","scrollToResults","localCelebAnagramFinder","document","body","scrollHeight","querySelector","scrollIntoView","behavior","block","inline","dataset","searchSelected","searchSubmitted","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41cad2e1.chunk.js","sourcesContent":["export default async function celebAnagramFinder(value) {\r\n  function cleanInputValue(value) {\r\n    //write input value to anagram variable\r\n    //Check if there are multiple ANAGRAMS and split into array\r\n    if (value.toUpperCase().includes(\",\")) {\r\n      //Create array from comma seperated anagram and remove spaces\r\n      value = value\r\n        .toUpperCase()\r\n        .replace(/\\s/g, \"\")\r\n        .split(\",\");\r\n      //Remove any non alphabet values\r\n      value.forEach(function(val, index) {\r\n        value[index] = val.replace(/[^A-Z]/g, \"\");\r\n      });\r\n      // console.log(anagram)\r\n    } else {\r\n      //If there is only one ANAGRAM value\r\n      //Place Anagram into Array\r\n      value = [value.toUpperCase().replace(/\\s/g, \"\")];\r\n      //Remove any non alphabet values\r\n      value.forEach(function(val, index) {\r\n        value[index] = val.replace(/[^A-Z]/g, \"\");\r\n      });\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  let anagram = cleanInputValue(value);\r\n\r\n  //console.log(anagram)\r\n\r\n  //Bypass CORS if needed. Replace fetch url with proxyUrl + targetUrl\r\n  let proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n  let targetUrl = \"https://celebritybucks.com/developers/export/JSON\";\r\n\r\n  let matchRateResult = {};\r\n\r\n  //Fetch the json of celebs\r\n  let resFetch = await fetch(proxyUrl + targetUrl);\r\n\r\n  let celebsFromApi = await resFetch.json();\r\n\r\n  //covnert result to JSOn\r\n\r\n  function apiChange() {\r\n    //If it fails, log message and quit\r\n    if (resFetch.status !== 200) {\r\n      console.log(\r\n        \"Looks like there was a problem. Status Code: \" + resFetch.status\r\n      );\r\n      return;\r\n    }\r\n    // STRUCTURE---- celebsFromApi = {CelebrityValues: [{ name: \"Serena Williams\" },{ name: \"Kacey Musgraves\" }, { name: \"Ivana Milicevic\" } ] };\r\n    // console.log(\"Celebs from API\", celebsFromApi.CelebrityValues)\r\n\r\n    //Example Anagrams to search for\r\n    /* var anagram = [\"TRUMCDONALD\", \"SHAVERSINB\", \"SHAVERSINC\", \"SHAVERSINM\", \"SHAVERSINP\", \"HASTYMAREA\", \"HASTYMAREE\", \"HASTYMAREI\",\r\n           \"HASTYMAREL\", \"HASTYMAREN\", \"HASTYMAREO\", \"HASTYMARER\", \"HASTYMARES\", \"HASTYMARET\", \"HASTYMAREU\", \"SLIMSWINEAREAA\",\r\n           \"SLIMSWINEAREAE\", \"SLIMSWINEAREAI\", \"SLIMSWINEAREAL\", \"SLIMSWINEAREAN\", \"SLIMSWINEAREAO\", \"SLIMSWINEAREAR\", \"SLIMSWINEAREAS\",\r\n           \"SLIMSWINEAREAT\", \"SLIMSWINEAREAU\", \"ROTTENGROANA\", \"ROTTENGROANE\", \"ROTTENGROANI\", \"ROTTENGROANL\", \"ROTTENGROANN\", \"ROTTENGROANO\",\r\n           \"ROTTENGROANR\", \"ROTTENGROANS\", \"ROTTENGROANT\", \"ROTTENGROANU\", \"GRIMERTABOOB\", \"GRIMERTABOOC\", \"GRIMERTABOOM\", \"GRIMERTABOOP\", \"PUTINKARMAF\",\r\n           \"PUTINKARMAH\", \"PUTINKARMAV\", \"PUTINKARMAW\", \"PUTINKARMAY\", \"SLOTHMENWAILA\", \"SLOTHMENWAILE\", \"SLOTHMENWAILI\", \"SLOTHMENWAILL\", \"SLOTHMENWAILN\",\r\n           \"SLOTHMENWAILO\", \"SLOTHMENWAILR\", \"SLOTHMENWAILS\", \"SLOTHMENWAILT\", \"SLOTHMENWAILU\", \"BENLAIDLAWB\", \"BENLAIDLAWC\", \"BENLAIDLAWM\", \"BENLAIDLAWP\",\r\n           \"ONEMUTTISLANDA\", \"ONEMUTTISLANDE\", \"ONEMUTTISLANDI\", \"ONEMUTTISLANDL\", \"ONEMUTTISLANDN\", \"ONEMUTTISLANDO\", \"ONEMUTTISLANDR\", \"ONEMUTTISLANDS\",\r\n           \"ONEMUTTISLANDT\", \"ONEMUTTISLANDU\", \"JEDIMATHSA\", \"JEDIMATHSE\", \"JEDIMATHSI\", \"JEDIMATHSL\", \"JEDIMATHSN\", \"JEDIMATHSO\", \"JEDIMATHSR\", \"JEDIMATHSS\",\r\n           \"JEDIMATHST\", \"JEDIMATHSU\"];\r\n  */\r\n    //Go through the anagram array\r\n    for (let k_counter = 0; k_counter < anagram.length; k_counter++) {\r\n      //Split the anagram into an array of individual letters\r\n      let splitAnagramToLetters = anagram[k_counter].split(\"\");\r\n      //console.log(splitAnagramToLetters)\r\n      //[S,H,A,V,E,R,S,I,N]\r\n\r\n      //Count the occurances of letters within the current anagram\r\n      let anagramLetterCount = {};\r\n      //make an array of each letter and iterate through\r\n      splitAnagramToLetters.forEach(function(ana, ind, initialArray) {\r\n        //Create an object that uses the letter as a key\r\n        //Then with a filter, it iterates through the array containing all the ANAGRAM letters to compare the key letter\r\n        //Then uses the length of the filtered result as the amount of occurances\r\n        anagramLetterCount[ana] = initialArray.filter(function(filteredAna) {\r\n          return filteredAna === ana;\r\n        }).length;\r\n      });\r\n\r\n      //Iterate that against a loop going through the resulting array of celebs -\r\n      //For each resulting celeb, check the matching letters\r\n      for (\r\n        let i_counter = 0;\r\n        i_counter < celebsFromApi.CelebrityValues.length;\r\n        i_counter++\r\n      ) {\r\n        let celebNameCleanedUp = celebsFromApi.CelebrityValues[i_counter].name\r\n          .toUpperCase()\r\n          .replace(\" \", \"\")\r\n          .replace(/[^A-Z]/g, \"\");\r\n        //If the length of the word in the anagram array is the same as the name from the api call (with spaces removed)\r\n        if (anagram[k_counter].length === celebNameCleanedUp.length) {\r\n          //Make an empty object\r\n          let matchedLetters = {};\r\n\r\n          //Iterate through the splitAnagramToLetters array and count letter matches with celeb name\r\n          for (\r\n            let l_counter = 0;\r\n            l_counter < splitAnagramToLetters.length;\r\n            l_counter++\r\n          ) {\r\n            //If the name from the celebs api array contains the letter from the splitAnagramToLetters array\r\n            if (celebNameCleanedUp.includes(splitAnagramToLetters[l_counter])) {\r\n              //If the ind object does not contain the current letter from the splitAnagramToLetters array (because that letter has not been checked yet)\r\n              if (!matchedLetters[splitAnagramToLetters[l_counter]]) {\r\n                //Find the amount of times the current letter from the splitAnagramToLetters array shows up in the celebsFromApi name\r\n                let anagramLetterInCelebLetterCount = celebNameCleanedUp\r\n                  .split(\"\")\r\n                  .filter(data => data === splitAnagramToLetters[l_counter])\r\n                  .length;\r\n\r\n                // let lettersInAnagramCount = splitAnagramToLetters.filter((data) => data === splitAnagramToLetters[l_counter]).length;\r\n                //If the amount of times this letter is found is larger than the amount of times it's in the anagram, then we need to break and leave the loop and move on to the next anagram\r\n\r\n                if (\r\n                  anagramLetterInCelebLetterCount >\r\n                  anagramLetterCount[splitAnagramToLetters[l_counter]] + 1\r\n                ) {\r\n                  //debugger;\r\n                  break;\r\n                } else {\r\n                  matchedLetters[\r\n                    splitAnagramToLetters[l_counter]\r\n                  ] = anagramLetterInCelebLetterCount;\r\n                  //{A:1,B:3}\r\n                }\r\n                //Add the splitAnagramToLetters letter into the ind object along with the amount of times the current showed up\r\n              }\r\n            }\r\n          }\r\n\r\n          //Compare the 2 objects and count the amount of matches\r\n          //console.log(anagramLetterCount, ind)\r\n          let count = 0;\r\n          let totalCount = 0;\r\n          //Iterate through the keys of the anagramLetterCount object which keeps a record of the occurance of letters in the celeb name\r\n          //The count variable keeps a count of the matches\r\n          Object.keys(anagramLetterCount).forEach(function(indVal) {\r\n            if (matchedLetters[indVal] === anagramLetterCount[indVal]) {\r\n              //console.log(indVal, ind[indVal],anagramLetterCount[indVal] )\r\n              count++;\r\n            }\r\n          });\r\n\r\n          //totalCount gets the total count of matches then converts this into a percentage value based on the amount of matches\r\n          totalCount = (\r\n            (count / Object.keys(anagramLetterCount).length) *\r\n            100\r\n          ).toFixed();\r\n\r\n          //Control the threshold for what is shown in the results\r\n          if (totalCount >= 80) {\r\n            if (!matchRateResult[anagram[k_counter]]) {\r\n              //Create an empty array is it doesn't\r\n              matchRateResult[anagram[k_counter]] = [];\r\n            }\r\n            //Push the resulting Celeb and match rate to the obj object\r\n            //obj.*anagramName* = [{Celeb Name: 90%},{Other Celeb Name: 90%}]\r\n            matchRateResult[anagram[k_counter]].push({\r\n              [celebsFromApi.CelebrityValues[i_counter].name]: totalCount + \"%\"\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //{THANKSMO:[{Tom Hanks: \"100%\"}],TRUMCDONALD:[{Donald Trump:\"100%\"}]}\r\n    console.log(matchRateResult);\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      resolve(matchRateResult);\r\n      //throw new Error(\"Something went badly wrong!\");\r\n    });\r\n  }\r\n\r\n  return await apiChange();\r\n  // return  matchRateResult;\r\n}\r\n","import React from \"react\";\r\nlet pageReset = 0;\r\nexport default class ResultsFound extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentResultsPage: 0,\r\n      maxPages: 1\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log( this.chunk(Object.keys(this.props.results),10));\r\n    this.setState({\r\n      maxPages: this.chunk(Object.keys(this.props.results), 10).length,\r\n      currentResultsPage: 0\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.results !== this.props.results) {\r\n      //pageReset = 0;\r\n      console.log(pageReset);\r\n      this.setState({\r\n        maxPages: this.chunk(Object.keys(this.props.results), 10).length,\r\n        currentResultsPage: 0\r\n      });\r\n    }\r\n\r\n    if (prevProps.display !== this.props.display) {\r\n      //pageReset = 0;\r\n      this.setState({\r\n        maxPages: this.chunk(Object.keys(this.props.results), 10).length,\r\n        currentResultsPage: 0\r\n      });\r\n    }\r\n  }\r\n\r\n  //Seperate the results into chunks, so we can have different pages for the results\r\n  chunk(arr, chunckSize) {\r\n    // debugger;\r\n    let newChunk = [];\r\n    let j = 0;\r\n    for (let i = 0; i < arr.length; i += chunckSize) {\r\n      !i ? (j = 0) : (j += chunckSize);\r\n      newChunk.push(arr.slice(j, j + chunckSize));\r\n    }\r\n\r\n    return newChunk;\r\n  }\r\n\r\n  navigateResults(e) {\r\n    if (e.target.textContent === \" » \") {\r\n      if (this.state.currentResultsPage < this.state.maxPages - 1) {\r\n        //pageReset++;\r\n        this.setState({\r\n          currentResultsPage: this.state.currentResultsPage + 1\r\n        });\r\n      }\r\n    } else if (e.target.textContent === \" « \") {\r\n      if (this.state.currentResultsPage > 0) {\r\n        //pageReset--;\r\n        this.setState({\r\n          currentResultsPage: this.state.currentResultsPage - 1\r\n        });\r\n      }\r\n    }\r\n    // console.log(this.state.currentResultsPage, this.state.maxPages - 1);\r\n    // console.dir(e.target.textContent);\r\n  }\r\n\r\n  //This keeps a look at where you are in the viewing\r\n  resultsCounter() {\r\n    try {\r\n      let chunked = this.chunk(this.rows(), 10)[this.state.currentResultsPage];\r\n      if (this.state.currentResultsPage > 0) {\r\n        return (\r\n          //Showing 1 0f 10\r\n          //length of the page minus (length of the page minus 1)\r\n\r\n          `${this.state.currentResultsPage * 10 + 1} - ${this.state\r\n            .currentResultsPage *\r\n            10 +\r\n            chunked.length} `\r\n        );\r\n      } else {\r\n        return `1 - ${chunked.length}`;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"HERE\");\r\n      return `0 - ${this.chunk(this.rows(), 10)[0].length}`;\r\n    }\r\n  }\r\n\r\n  rows() {\r\n    // console.log(this.props.results);\r\n    return Array(Object.keys(this.props.results).length)\r\n      .fill(\"\")\r\n      .map((value, ind) => {\r\n        const anagramName = Object.keys(this.props.results)[ind]; //Thanksmo\r\n        const val = this.props.results[anagramName][0]; //return the array associated with the anagram\r\n        /*0: {Tom Hanks: \"100%\"} */\r\n        const celebName = Object.keys(val)[0]; //Create an array based off the keys in the returned object.\r\n        //\"Tom Hanks\"\r\n        const celebNameURL = (\r\n          <a target=\"blank\" href={\"https://en.wikipedia.org/wiki/\" + celebName}>\r\n            {celebName}\r\n          </a>\r\n        ); //Create a wiki link based off the celebname.\r\n        const innerCurrent = val[celebName];\r\n        return (\r\n          <tr key={anagramName + celebName}>\r\n            <td>{anagramName}</td>\r\n            <td>{celebNameURL}</td>\r\n            <td>{innerCurrent}</td>\r\n          </tr>\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const tableDisplay = () =>\r\n      this.props.display === \"none\" ? \"flex\" : \"none\";\r\n    return (\r\n      <div style={{ display: tableDisplay() }} className=\"container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Anagram</th>\r\n              <th>Name</th>\r\n              <th>Match Rate</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.chunk(this.rows(), 10)[this.state.currentResultsPage]}\r\n          </tbody>\r\n        </table>\r\n        <ResultsPageNumber\r\n          prevResults={e => this.navigateResults(e)}\r\n          current={this.resultsCounter()}\r\n          nextResults={e => this.navigateResults(e)}\r\n          maximum={this.rows().length}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function ResultsPageNumber(props) {\r\n  return (\r\n    <div className=\"ResultsPageNumber\">\r\n      <p className=\"previous\" onClick={props.prevResults}>\r\n        {\" \"}\r\n        «{\" \"}\r\n      </p>\r\n      <p>\r\n        Showing {props.current} of {props.maximum}\r\n      </p>\r\n      <p className=\"next\" onClick={props.nextResults}>\r\n        {\" \"}\r\n        »{\" \"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./dual-ring.css\";\r\n\r\nexport default function Loading(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div style={{ display: props.display }} className=\"lds-dual-ring\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport celebAnagramFinder from \"./celebAnagramFinderAPICall\";\r\nimport ResultsFound from \"./ResultsFound\";\r\nimport Loading from \"./components/loading/dual-ring\";\r\nimport \"./App.css\";\r\n\r\nfunction NothingFound(props) {\r\n  return <h4>Nothing was found!</h4>;\r\n}\r\n\r\nfunction ResultDivContain(props) {\r\n  let results;\r\n\r\n  if (Object.keys(props.results).length === 0) {\r\n    results = <NothingFound />;\r\n  } else {\r\n    console.log(\"LOOK\", props.results);\r\n    results = <ResultsFound display={props.display} results={props.results} />;\r\n  }\r\n\r\n  return <div className=\"container\">{results}</div>;\r\n}\r\n\r\nfunction PageTitle(props) {\r\n  return (\r\n    <div className=\"headerPortion\">\r\n      <h1>{props.title + \" Anagram Finder\"}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SearchSelector(props) {\r\n  return (\r\n    <div>\r\n      <select\r\n        className=\"selector\"\r\n        onChange={props.handleClick}\r\n        name=\"anagramQuerySelect\"\r\n        id=\"anagramQuerySelect\"\r\n      >\r\n        <option className=\"celebrities\" value=\"Celebrities\">\r\n          Celebrities\r\n        </option>\r\n        <option className=\"general\" value=\"General\">\r\n          General\r\n        </option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SearchInput(props) {\r\n  let placeholderText;\r\n  props.placeholder === \"General\"\r\n    ? (placeholderText = \"This feature is coming soon\")\r\n    : (placeholderText = \"Thanksmo,TRUMCDONALD,parsi/hl itno\");\r\n\r\n  return (\r\n    <div className=\"searchInput\">\r\n      <input\r\n        className=\"searchTextInput\"\r\n        onKeyPress={props.submitted}\r\n        onChange={props.searchTerm}\r\n        type=\"text\"\r\n        defaultValue={placeholderText}\r\n      ></input>\r\n      <input onClick={props.submitted} type=\"button\" value=\"Search\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PreviousSearches(props) {\r\n  // props.history.length > 0 ? console.log(props.history[0].searchTerm.split()) : console.log(\"it failed\");\r\n  //Create an empty array with length of 5\r\n\r\n  let historyButtons = Array(5)\r\n    .fill(\"\")\r\n    .map((val, ind) => {\r\n      let searchResults = props.history[ind];\r\n      if (searchResults) {\r\n        console.log(searchResults);\r\n        return (\r\n          <div\r\n            className=\"history\"\r\n            key={searchResults + ind}\r\n            data-index={ind}\r\n            onClick={props.goback}\r\n            title={searchResults.searchTerm.slice(0, 60)}\r\n          >\r\n            {searchResults.searchTerm.replace(\",\", \"\").slice(0, 9)}\r\n            ...\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"history dash\" key={val + ind}>\r\n            -\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <p id=\"historyLabel\">Previous Searches</p>\r\n        <div id=\"historyLabelArrows\"></div>\r\n      </div>\r\n      <div className=\"resultsContainer\">{historyButtons}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      anagramType: PageTitle.defaultProps.title,\r\n      SearchInputName: PageTitle.defaultProps.title,\r\n      searchTerm: \"Thanksmo,TRUMCDONALD,parsi/hl itno\",\r\n      results: [],\r\n      resultsHistory: [],\r\n      loading: \"none\"\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //Update the History array that's keeping track of previous results\r\n\r\n    if (prevState.resultsHistory !== this.state.resultsHistory) {\r\n      if (Object.keys(this.state.results).length > 0) {\r\n        this.scrollToResults();\r\n      }\r\n    }\r\n  }\r\n\r\n  searchSelected(e) {\r\n    //console.dir(e.target)\r\n    this.setState({\r\n      anagramType: e.target.value,\r\n      SearchInputName: e.target.value\r\n    });\r\n  }\r\n\r\n  async localCelebAnagramFinder(val) {\r\n    this.setState({ loading: \"inherit\" });\r\n    let searchResults = await celebAnagramFinder(val);\r\n    let history = this.state.resultsHistory.slice(-4);\r\n    history.push({\r\n      searchTerm: this.state.searchTerm,\r\n      results: searchResults\r\n    });\r\n\r\n    this.setState({\r\n      resultsHistory: history,\r\n      results: searchResults,\r\n      loading: \"none\"\r\n      //searchTerm: val\r\n    });\r\n  }\r\n\r\n  searchTerm(e) {\r\n    this.setState({ searchTerm: e.target.value });\r\n  }\r\n\r\n  searchSubmitted(e) {\r\n    // console.log(\r\n    //   this.state.resultsHistory[this.state.resultsHistory.length - 1]\r\n    // );\r\n    if (\r\n      this.state.resultsHistory.length === 0 ||\r\n      this.state.searchTerm !==\r\n        this.state.resultsHistory[this.state.resultsHistory.length - 1]\r\n          .searchTerm\r\n    ) {\r\n      if (e.key === \"Enter\" || e.target.type === \"button\") {\r\n        this.localCelebAnagramFinder(\r\n          this.state.searchTerm\r\n          //document.querySelectorAll(\".searchTextInput\")[0].value\r\n        );\r\n      }\r\n    }\r\n  }\r\n  scrollToResults() {\r\n    // document.querySelector(\"table\").scrollIntoView({behavior: \"smooth\", block: \"nearest\", inline: \"nearest\"})\r\n    console.log(\r\n      document.body.scrollHeight - document.querySelector(\"table\").scrollHeight,\r\n      document.body.scrollHeight,\r\n      document.querySelector(\"table\").scrollHeight\r\n    );\r\n    //window.scrollTo(0, 500);\r\n    document.querySelector(\"table\").scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"start\",\r\n      inline: \"nearest\"\r\n    });\r\n  }\r\n  goback(e) {\r\n    //console.dir(e.target.dataset.index);\r\n    //history.push({ searchTerm: this.state.searchTerm, results: this.state.results });\r\n\r\n    this.setState({\r\n      results: this.state.resultsHistory[e.target.dataset.index].results\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let rows;\r\n    if (this.state.results.length === 0) {\r\n      rows = [];\r\n    } else {\r\n      rows = (\r\n        <ResultDivContain\r\n          display={this.state.loading}\r\n          results={this.state.results}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <PageTitle title={this.state.anagramType} />\r\n\r\n          <div className=\"inputSubmitContainer\">\r\n            <SearchSelector handleClick={e => this.searchSelected(e)} />\r\n            <SearchInput\r\n              placeholder={this.state.anagramType}\r\n              submitted={e => this.searchSubmitted(e)}\r\n              searchTerm={e => this.searchTerm(e)}\r\n            />\r\n          </div>\r\n          <PreviousSearches\r\n            goback={e => this.goback(e)}\r\n            history={this.state.resultsHistory}\r\n          />\r\n          <Loading display={this.state.loading} />\r\n          <div>{rows}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPageTitle.defaultProps = {\r\n  title: \"Celebrity\",\r\n  SearchInputName: \"Name\"\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}